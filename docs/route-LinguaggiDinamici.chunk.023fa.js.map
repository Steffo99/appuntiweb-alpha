{"version":3,"sources":["webpack:///./routes/LinguaggiDinamici/00_Intro.js","webpack:///./routes/LinguaggiDinamici/01_Python.js","webpack:///./routes/LinguaggiDinamici/index.js"],"names":["title","href","r","String","raw","Provider","value"],"mappings":"4FAAA,oDAOe,eACX,OACI,EAAC,WAAD,KACI,EAAC,IAAD,CAASA,MAAO,SACZ,EAAC,IAAD,CAAOA,MAAO,YACV,YACI,YAAI,EAAC,IAAD,CAAMC,KAAM,oCAAZ,gC,gjGCTtBC,G,UAAIC,OAAOC,KAGF,eACX,OACI,EAAC,IAAoBC,SAArB,CAA8BC,MAAO,UAErC,EAAC,WAAD,KACI,sBACA,EAAC,IAAD,CAASN,MAAO,mBACZ,EAAC,IAAD,CAAOA,MAAO,OACV,kBACQ,qBADR,iCAGA,EAAC,IAAD,KAAOE,EAAP,MAGA,qDAGA,EAAC,IAAD,KAAOA,EAAP,MAGA,+FAGA,EAAC,IAAD,KAAOA,EAAP,OAIJ,EAAC,IAAD,CAAOF,MAAO,SACV,gBACM,uBADN,gCAGA,EAAC,IAAD,KAAOE,EAAP,MAGA,gEAGA,EAAC,IAAD,KAAOA,EAAP,MAGA,oFAGA,EAAC,IAAD,KAAOA,EAAP,QAKR,EAAC,IAAD,KACI,EAAC,IAAD,CAAOF,MAAO,OACV,iBACO,qBADP,qCAGA,wEAGA,EAAC,IAAD,KAAOE,EAAP,MAIA,sIAGA,EAAC,IAAD,KAAOA,EAAP,MAIA,kEAGA,EAAC,IAAD,KAAOA,EAAP,MAGA,wGAGA,EAAC,IAAD,KAAOA,EAAP,OASJ,EAAC,IAAD,CAAOF,MAAO,SACV,gBACM,uBADN,oEAGA,+DACqD,mBADrD,gBAGA,EAAC,IAAD,KAAOE,EAAP,MAIA,oFAC0E,cAAOA,EAAP,MAD1E,uCAGA,EAAC,IAAD,KAAOA,EAAP,MAIA,2EACiE,qBADjE,KAGA,EAAC,IAAD,KAAOA,EAAP,MAGA,gFACsE,2CADtE,KAGA,EAAC,IAAD,KAAOA,EAAP,QAUR,EAAC,IAAD,KACI,EAAC,IAAD,CAAOF,MAAO,SACV,kEAGA,EAAC,IAAD,KAAOE,EAAP,MAOA,2CAGA,EAAC,IAAD,KAAOA,EAAP,a,0DChJpB,+CAIe,qBACX,OACI,aACI,kCACA,EAAC,IAAD,MACA,EAAC,IAAD,S","file":"route-LinguaggiDinamici.chunk.023fa.js","sourcesContent":["import {Fragment} from \"preact\";\nimport {Section, Panel, ILatex, BLatex, PLatex} from \"bluelib\";\nimport Link from \"../../components/Link\";\n\nconst r = String.raw;\n\n\nexport default function () {\n    return (\n        <Fragment>\n            <Section title={\"Esame\"}>\n                <Panel title={\"Contatti\"}>\n                    <ul>\n                        <li><Link href={\"mailto:mauro.leoncini@unimore.it\"}>Prof. Mauro Leoncini</Link></li>\n                    </ul>\n                </Panel>\n            </Section>\n        </Fragment>\n    )\n}\n","import {Fragment} from \"preact\";\nimport {Section, Panel, ILatex, BLatex, PLatex, CodeDefaultLanguage, Code} from \"bluelib\";\nimport Link from \"../../components/Link\";\n\nconst r = String.raw;\n\n\nexport default function () {\n    return (\n        <CodeDefaultLanguage.Provider value={\"python\"}>\n\n        <Fragment>\n            <h1>Python</h1>\n            <Section title={\"Tipi immutabili\"}>\n                <Panel title={\"int\"}>\n                    <p>\n                        Gli <code>int</code> rappresentano numeri interi:\n                    </p>\n                    <Code>{r`\n                        42\n                    `}</Code>\n                    <p>\n                        Non hanno nessun limite di dimensione:\n                    </p>\n                    <Code>{r`\n                        1000000000\n                    `}</Code>\n                    <p>\n                        Per maggiore chiarezza, si possono usare liberamente underscore per formattarli:\n                    </p>\n                    <Code>{r`\n                        1_000_000_000\n                    `}</Code>\n                </Panel>\n                <Panel title={\"float\"}>\n                    <p>\n                        I <code>float</code> rappresentano numeri reali:\n                    </p>\n                    <Code>{r`\n                        42.0\n                    `}</Code>\n                    <p>\n                        Sono limitati alla doppia precisione di macchina:\n                    </p>\n                    <Code>{r`\n                        13.999999999999999  # Diventa 13.999999999999998\n                    `}</Code>\n                    <p>\n                        Per maggiore chiarezza, si possono scrivere in notazione scientifica:\n                    </p>\n                    <Code>{r`\n                        4.2e1\n                    `}</Code>\n                </Panel>\n            </Section>\n            <Section>\n                <Panel title={\"str\"}>\n                    <p>\n                        Le <code>str</code> rappresentano del testo Unicode.\n                    </p>\n                    <p>\n                        Il testo va racchiuso tra uno dei due tipi di virgolette:\n                    </p>\n                    <Code>{r`\n                        \"Ciaone!\"\n                        'Ciaone!'\n                    `}</Code>\n                    <p>\n                        Se nel testo compare lo stesso tipo di virgoletta usato come delimitatore, va prefisso un backslash ad ogni ricorrenza:\n                    </p>\n                    <Code>{r`\n                        \"Ciaone dall'Italia!\"\n                        'Ciaone dall\\'Italia!'\n                    `}</Code>\n                    <p>\n                        Il testo pu√≤ contenere qualsiasi carattere Unicode:\n                    </p>\n                    <Code>{r`\n                        \"bel mem√´ amic√∏ üî•\"\n                    `}</Code>\n                    <p>\n                        √à possibile creare testi che continuino su pi√π linee inserendo il delimitatore tre volte:\n                    </p>\n                    <Code>{r`\n                        \"\"\"\n                        questa\n                        stringa\n                        √® su pi√π\n                        righe\n                        \"\"\"\n                    `}</Code>\n                </Panel>\n                <Panel title={\"bytes\"}>\n                    <p>\n                        I <code>bytes</code> rappresentano delle sequenze di bytes (rappresentate in ASCII).\n                    </p>\n                    <p>\n                        I valori vanno racchiusi tra virgolette, pi√π una <code>b</code> all'inizio:\n                    </p>\n                    <Code>{r`\n                        b\"Ciaone!\"\n                        b'Ciaone!'\n                    `}</Code>\n                    <p>\n                        √à possibile inserire valori che non corrispondono ad un carattere con <code>{r`\\xXX`}</code>, dove XX √® il valore dei due byte.\n                    </p>\n                    <Code>{r`\n                        b\"\\x00\\x01\\x02\\x03\\x04\"\n                        b'\\x63\\x69\\x61\\x6f\\x6e\\x65'\n                    `}</Code>\n                    <p>\n                        Possono rappresentare un particolare encoding (UTF-8) di una <code>str</code>:\n                    </p>\n                    <Code>{r`\n                        b\"bel mem\\xc3\\xab amic\\xc3\\xb8 \\xf0\\x9f\\x94\\xa5\"\n                    `}</Code>\n                    <p>\n                        Possono continuare su pi√π linee inserendo le virgolette tre volte <i>(ma non fatelo, per piacere)</i>.\n                    </p>\n                    <Code>{r`\n                        b\"\"\"\n                        questi\n                        bytes\n                        sono su pi√π\n                        righe\n                        \"\"\"\n                    `}</Code>\n                </Panel>\n            </Section>\n            <Section>\n                <Panel title={\"Tuple\"}>\n                    <p>\n                        Insiemi di zero, uno, o qualsiasi numero di valori:\n                    </p>\n                    <Code>{r`\n                        ()\n                        \n                        (1,)\n                        \n                        (1, 2, 3, 5)\n                    `}</Code>\n                    <p>\n                        Possono non essere omogenei:\n                    </p>\n                    <Code>{r`\n                        (1, 2.0, \"tre\", b\"cinque\")\n                    `}</Code>\n                </Panel>\n            </Section>\n        </Fragment>\n\n        </CodeDefaultLanguage.Provider>\n    )\n}\n","import Intro from \"./00_Intro\";\nimport Python from \"./01_Python\";\n\n\nexport default function () {\n    return (\n        <div>\n            <h1>Linguaggi dinamici</h1>\n            <Intro/>\n            <Python/>\n        </div>\n    )\n}\n"],"sourceRoot":""}